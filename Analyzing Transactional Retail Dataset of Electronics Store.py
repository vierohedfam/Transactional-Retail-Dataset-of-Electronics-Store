# -*- coding: utf-8 -*-
"""Tugas 2 data Viero.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vXqy1BK6cxj-O6CLDhbKtX25nRXFK53P
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from scipy.stats import skew
from sklearn.preprocessing import MinMaxScaler
from ydata_profiling import ProfileReport
import scipy.stats

data=pd.read_csv("/content/dirty_data.csv")
data

data.drop(columns=["order_id", "customer_id", "date", "nearest_warehouse", "shopping_cart", "order_price", "customer_lat", "customer_long", "season", "is_expedited_delivery", "distance_to_nearest_warehouse", "latest_customer_review", "is_happy_customer"], inplace = True)
data

skew_delivery_charges = skew(data['delivery_charges'])
skew_coupon_discount = skew(data['coupon_discount'])
skew_order_total = skew(data['order_total'])

print("Skewness pada kolom delivery_charges:", skew_delivery_charges)
print("Skewness pada kolom coupon_discount:", skew_coupon_discount)
print("Skewness pada kolom order_total:", skew_order_total)

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return data[(data < lower_bound) | (data > upper_bound)]

outliers_delivery_charges = detect_outliers_iqr(data['delivery_charges'])
outliers_coupon_discount = detect_outliers_iqr(data['coupon_discount'])
outliers_order_total = detect_outliers_iqr(data['order_total'])

print("Outliers pada kolom delivery_charges:", outliers_delivery_charges)
print("Outliers pada kolom coupon_discount:", outliers_coupon_discount)
print("Outliers pada kolom order_total:", outliers_order_total)

plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
sns.boxplot(y=data['delivery_charges'])
plt.title('Boxplot of Delivery Charges')

plt.subplot(1, 3, 2)
sns.boxplot(y=data['coupon_discount'])
plt.title('Boxplot of Coupon Discount')

plt.subplot(1, 3, 3)
sns.boxplot(y=data['order_total'])
plt.title('Boxplot of Order Total')

plt.tight_layout()
plt.show()

def iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return data[(data >= lower_bound) & (data <= upper_bound)]

data_cleaned = pd.DataFrame()
data_cleaned['delivery_charges'] = iqr(data['delivery_charges'])
data_cleaned['coupon_discount'] = iqr(data['coupon_discount'])
data_cleaned['order_total'] = iqr(data['order_total'])

data_cleaned = data_cleaned.dropna().reset_index(drop=True)

def calculate_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    return Q1, Q3, IQR

iqr_delivery_charges = calculate_iqr(data_cleaned['delivery_charges'])
iqr_coupon_discount = calculate_iqr(data_cleaned['coupon_discount'])
iqr_order_total = calculate_iqr(data_cleaned['order_total'])

print("IQR Delivery Charges - Q1:", iqr_delivery_charges[0], ", Q3:", iqr_delivery_charges[1], ", IQR:", iqr_delivery_charges[2])
print("IQR Coupon Discount - Q1:", iqr_coupon_discount[0], ", Q3:", iqr_coupon_discount[1], ", IQR:", iqr_coupon_discount[2])
print("IQR Order Total - Q1:", iqr_order_total[0], ", Q3:", iqr_order_total[1], ", IQR:", iqr_order_total[2])

skewness_delivery_charges = data_cleaned['delivery_charges'].skew()
skewness_coupon_discount = data_cleaned['coupon_discount'].skew()
skewness_order_total = data_cleaned['order_total'].skew()

print("Skewness Delivery Charges:", skewness_delivery_charges)
print("Skewness Coupon Discount:", skewness_coupon_discount)
print("Skewness Order Total:", skewness_order_total)

correlation_spearman = data_cleaned.corr(method='spearman')

print("Korelasi Spearman:")
print(correlation_spearman)

X = data_cleaned[['delivery_charges', 'coupon_discount']]
y = data_cleaned['order_total']

X = sm.add_constant(X)

model = sm.OLS(y, X).fit()

print("Model Summary:")
print(model.summary())

scaler = MinMaxScaler()

data_scaled = pd.DataFrame(scaler.fit_transform(data_cleaned), columns=data_cleaned.columns)

print("DataFrame setelah Min-Max Scaling:")
print(data_scaled)